// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int           @id @default(autoincrement())
  name             String
  email            String        @unique
  picture          String?
  password         String
  pitch            String?
  about            String?
  availability     Boolean?      @default(true)
  money            Int?          @default(0)
  createdProjects  Project[]     @relation("UserProjects")
  appliedProjects  Application[] @relation("UserApplications")
  reviewsGiven     Review[]      @relation("ReviewsGiven")
  reviewsReceived  Review[]      @relation("ReviewsReceived")
  ratingsGiven     Rating[]      @relation("RatingsGiven")
  ratingsReceived  Rating[]      @relation("RatingsReceived")
  assignedProjects Project[]     @relation("assinedProjects")
}

model Review {
  id         Int    @id @default(autoincrement())
  review     String
  reviewer   User   @relation("ReviewsGiven", fields: [reviewerId], references: [id], onDelete: Cascade)
  reviewerId Int
  reviewee   User   @relation("ReviewsReceived", fields: [revieweeId], references: [id], onDelete: Cascade)
  revieweeId Int
}

model Rating {
  id          Int  @id @default(autoincrement())
  rater       User @relation("RatingsGiven", fields: [raterId], references: [id], onDelete: Cascade)
  raterId     Int
  receiver    User @relation("RatingsReceived", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId  Int // Enum for rating type
  ratingValue Int? @default(0) // The actual rating value (optional)
}

model Project {
  id             Int            @id @default(autoincrement())
  title          String
  creator        User           @relation("UserProjects", fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId      Int
  description    String
  price          Int
  status         ProjectStatus? @default(INACTIVE)
  appliedUsers   Application[]  @relation("ProjectApplications")
  assignedUser   User?          @relation("assinedProjects", fields: [assignedUserId], references: [id], onDelete: Cascade)
  assignedUserId Int?
}

enum ProjectStatus {
  ACTIVE
  INACTIVE
  COMPLETED
}

model Application {
  id          Int     @id @default(autoincrement())
  applicant   User    @relation("UserApplications", fields: [applicantId], references: [id], onDelete: Cascade)
  applicantId Int
  project     Project @relation("ProjectApplications", fields: [projectId], references: [id], onDelete: Cascade)
  projectId   Int
}
